// source: cmts.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.commentsProto.comments', null, global);
goog.exportSymbol('proto.commentsProto.comments.commentsReq', null, global);
goog.exportSymbol('proto.commentsProto.comments.commentsReq.commentsData', null, global);
goog.exportSymbol('proto.commentsProto.comments.video', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.commentsProto.comments = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.commentsProto.comments.repeatedFields_, null);
};
goog.inherits(proto.commentsProto.comments, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.commentsProto.comments.displayName = 'proto.commentsProto.comments';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.commentsProto.comments.video = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.commentsProto.comments.video, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.commentsProto.comments.video.displayName = 'proto.commentsProto.comments.video';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.commentsProto.comments.commentsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.commentsProto.comments.commentsReq.repeatedFields_, null);
};
goog.inherits(proto.commentsProto.comments.commentsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.commentsProto.comments.commentsReq.displayName = 'proto.commentsProto.comments.commentsReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.commentsProto.comments.commentsReq.commentsData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.commentsProto.comments.commentsReq.commentsData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.commentsProto.comments.commentsReq.commentsData.displayName = 'proto.commentsProto.comments.commentsReq.commentsData';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.commentsProto.comments.repeatedFields_ = [2,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.commentsProto.comments.prototype.toObject = function(opt_includeInstance) {
  return proto.commentsProto.comments.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.commentsProto.comments} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commentsProto.comments.toObject = function(includeInstance, msg) {
  var f, obj = {
    videomsgList: jspb.Message.toObjectList(msg.getVideomsgList(),
    proto.commentsProto.comments.video.toObject, includeInstance),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    commentsreqmsgList: jspb.Message.toObjectList(msg.getCommentsreqmsgList(),
    proto.commentsProto.comments.commentsReq.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.commentsProto.comments}
 */
proto.commentsProto.comments.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.commentsProto.comments;
  return proto.commentsProto.comments.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.commentsProto.comments} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.commentsProto.comments}
 */
proto.commentsProto.comments.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.commentsProto.comments.video;
      reader.readMessage(value,proto.commentsProto.comments.video.deserializeBinaryFromReader);
      msg.addVideomsg(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setType(value);
      break;
    case 6:
      var value = new proto.commentsProto.comments.commentsReq;
      reader.readMessage(value,proto.commentsProto.comments.commentsReq.deserializeBinaryFromReader);
      msg.addCommentsreqmsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.commentsProto.comments.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.commentsProto.comments.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.commentsProto.comments} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commentsProto.comments.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVideomsgList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.commentsProto.comments.video.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getCommentsreqmsgList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.commentsProto.comments.commentsReq.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.commentsProto.comments.video.prototype.toObject = function(opt_includeInstance) {
  return proto.commentsProto.comments.video.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.commentsProto.comments.video} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commentsProto.comments.video.toObject = function(includeInstance, msg) {
  var f, obj = {
    videoid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.commentsProto.comments.video}
 */
proto.commentsProto.comments.video.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.commentsProto.comments.video;
  return proto.commentsProto.comments.video.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.commentsProto.comments.video} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.commentsProto.comments.video}
 */
proto.commentsProto.comments.video.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVideoid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.commentsProto.comments.video.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.commentsProto.comments.video.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.commentsProto.comments.video} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commentsProto.comments.video.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVideoid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string videoId = 2;
 * @return {string}
 */
proto.commentsProto.comments.video.prototype.getVideoid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.commentsProto.comments.video} returns this
 */
proto.commentsProto.comments.video.prototype.setVideoid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.commentsProto.comments.commentsReq.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.commentsProto.comments.commentsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.commentsProto.comments.commentsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.commentsProto.comments.commentsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commentsProto.comments.commentsReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    rankedstreams: jspb.Message.getFieldWithDefault(msg, 1, ""),
    commentsdatareqList: jspb.Message.toObjectList(msg.getCommentsdatareqList(),
    proto.commentsProto.comments.commentsReq.commentsData.toObject, includeInstance),
    sectiontype: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.commentsProto.comments.commentsReq}
 */
proto.commentsProto.comments.commentsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.commentsProto.comments.commentsReq;
  return proto.commentsProto.comments.commentsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.commentsProto.comments.commentsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.commentsProto.comments.commentsReq}
 */
proto.commentsProto.comments.commentsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRankedstreams(value);
      break;
    case 4:
      var value = new proto.commentsProto.comments.commentsReq.commentsData;
      reader.readMessage(value,proto.commentsProto.comments.commentsReq.commentsData.deserializeBinaryFromReader);
      msg.addCommentsdatareq(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSectiontype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.commentsProto.comments.commentsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.commentsProto.comments.commentsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.commentsProto.comments.commentsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commentsProto.comments.commentsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRankedstreams();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCommentsdatareqList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.commentsProto.comments.commentsReq.commentsData.serializeBinaryToWriter
    );
  }
  f = message.getSectiontype();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.commentsProto.comments.commentsReq.commentsData.prototype.toObject = function(opt_includeInstance) {
  return proto.commentsProto.comments.commentsReq.commentsData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.commentsProto.comments.commentsReq.commentsData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commentsProto.comments.commentsReq.commentsData.toObject = function(includeInstance, msg) {
  var f, obj = {
    videoid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    h: jspb.Message.getFieldWithDefault(msg, 6, 0),
    d: jspb.Message.getFieldWithDefault(msg, 15, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.commentsProto.comments.commentsReq.commentsData}
 */
proto.commentsProto.comments.commentsReq.commentsData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.commentsProto.comments.commentsReq.commentsData;
  return proto.commentsProto.comments.commentsReq.commentsData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.commentsProto.comments.commentsReq.commentsData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.commentsProto.comments.commentsReq.commentsData}
 */
proto.commentsProto.comments.commentsReq.commentsData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setVideoid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setH(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setD(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.commentsProto.comments.commentsReq.commentsData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.commentsProto.comments.commentsReq.commentsData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.commentsProto.comments.commentsReq.commentsData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commentsProto.comments.commentsReq.commentsData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVideoid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getH();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getD();
  if (f !== 0) {
    writer.writeInt64(
      15,
      f
    );
  }
};


/**
 * optional string videoId = 4;
 * @return {string}
 */
proto.commentsProto.comments.commentsReq.commentsData.prototype.getVideoid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.commentsProto.comments.commentsReq.commentsData} returns this
 */
proto.commentsProto.comments.commentsReq.commentsData.prototype.setVideoid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 h = 6;
 * @return {number}
 */
proto.commentsProto.comments.commentsReq.commentsData.prototype.getH = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.commentsProto.comments.commentsReq.commentsData} returns this
 */
proto.commentsProto.comments.commentsReq.commentsData.prototype.setH = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 d = 15;
 * @return {number}
 */
proto.commentsProto.comments.commentsReq.commentsData.prototype.getD = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.commentsProto.comments.commentsReq.commentsData} returns this
 */
proto.commentsProto.comments.commentsReq.commentsData.prototype.setD = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional string rankedStreams = 1;
 * @return {string}
 */
proto.commentsProto.comments.commentsReq.prototype.getRankedstreams = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.commentsProto.comments.commentsReq} returns this
 */
proto.commentsProto.comments.commentsReq.prototype.setRankedstreams = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated commentsData commentsDataReq = 4;
 * @return {!Array<!proto.commentsProto.comments.commentsReq.commentsData>}
 */
proto.commentsProto.comments.commentsReq.prototype.getCommentsdatareqList = function() {
  return /** @type{!Array<!proto.commentsProto.comments.commentsReq.commentsData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.commentsProto.comments.commentsReq.commentsData, 4));
};


/**
 * @param {!Array<!proto.commentsProto.comments.commentsReq.commentsData>} value
 * @return {!proto.commentsProto.comments.commentsReq} returns this
*/
proto.commentsProto.comments.commentsReq.prototype.setCommentsdatareqList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.commentsProto.comments.commentsReq.commentsData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.commentsProto.comments.commentsReq.commentsData}
 */
proto.commentsProto.comments.commentsReq.prototype.addCommentsdatareq = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.commentsProto.comments.commentsReq.commentsData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.commentsProto.comments.commentsReq} returns this
 */
proto.commentsProto.comments.commentsReq.prototype.clearCommentsdatareqList = function() {
  return this.setCommentsdatareqList([]);
};


/**
 * optional string sectionType = 8;
 * @return {string}
 */
proto.commentsProto.comments.commentsReq.prototype.getSectiontype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.commentsProto.comments.commentsReq} returns this
 */
proto.commentsProto.comments.commentsReq.prototype.setSectiontype = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * repeated video videoMsg = 2;
 * @return {!Array<!proto.commentsProto.comments.video>}
 */
proto.commentsProto.comments.prototype.getVideomsgList = function() {
  return /** @type{!Array<!proto.commentsProto.comments.video>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.commentsProto.comments.video, 2));
};


/**
 * @param {!Array<!proto.commentsProto.comments.video>} value
 * @return {!proto.commentsProto.comments} returns this
*/
proto.commentsProto.comments.prototype.setVideomsgList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.commentsProto.comments.video=} opt_value
 * @param {number=} opt_index
 * @return {!proto.commentsProto.comments.video}
 */
proto.commentsProto.comments.prototype.addVideomsg = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.commentsProto.comments.video, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.commentsProto.comments} returns this
 */
proto.commentsProto.comments.prototype.clearVideomsgList = function() {
  return this.setVideomsgList([]);
};


/**
 * optional int64 type = 3;
 * @return {number}
 */
proto.commentsProto.comments.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.commentsProto.comments} returns this
 */
proto.commentsProto.comments.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated commentsReq commentsReqMsg = 6;
 * @return {!Array<!proto.commentsProto.comments.commentsReq>}
 */
proto.commentsProto.comments.prototype.getCommentsreqmsgList = function() {
  return /** @type{!Array<!proto.commentsProto.comments.commentsReq>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.commentsProto.comments.commentsReq, 6));
};


/**
 * @param {!Array<!proto.commentsProto.comments.commentsReq>} value
 * @return {!proto.commentsProto.comments} returns this
*/
proto.commentsProto.comments.prototype.setCommentsreqmsgList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.commentsProto.comments.commentsReq=} opt_value
 * @param {number=} opt_index
 * @return {!proto.commentsProto.comments.commentsReq}
 */
proto.commentsProto.comments.prototype.addCommentsreqmsg = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.commentsProto.comments.commentsReq, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.commentsProto.comments} returns this
 */
proto.commentsProto.comments.prototype.clearCommentsreqmsgList = function() {
  return this.setCommentsreqmsgList([]);
};


goog.object.extend(exports, proto.commentsProto);
