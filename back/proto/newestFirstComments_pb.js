// source: newestFirstComments.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.newestCommentsPackage.newestComments', null, global);
goog.exportSymbol('proto.newestCommentsPackage.newestComments.pb1', null, global);
goog.exportSymbol('proto.newestCommentsPackage.newestComments.pb2', null, global);
goog.exportSymbol('proto.newestCommentsPackage.newestComments.pb3', null, global);
goog.exportSymbol('proto.newestCommentsPackage.newestComments.pb3.pb4', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.newestCommentsPackage.newestComments = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.newestCommentsPackage.newestComments.repeatedFields_, null);
};
goog.inherits(proto.newestCommentsPackage.newestComments, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.newestCommentsPackage.newestComments.displayName = 'proto.newestCommentsPackage.newestComments';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.newestCommentsPackage.newestComments.pb1 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.newestCommentsPackage.newestComments.pb1, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.newestCommentsPackage.newestComments.pb1.displayName = 'proto.newestCommentsPackage.newestComments.pb1';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.newestCommentsPackage.newestComments.pb2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.newestCommentsPackage.newestComments.pb2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.newestCommentsPackage.newestComments.pb2.displayName = 'proto.newestCommentsPackage.newestComments.pb2';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.newestCommentsPackage.newestComments.pb3 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.newestCommentsPackage.newestComments.pb3.repeatedFields_, null);
};
goog.inherits(proto.newestCommentsPackage.newestComments.pb3, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.newestCommentsPackage.newestComments.pb3.displayName = 'proto.newestCommentsPackage.newestComments.pb3';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.newestCommentsPackage.newestComments.pb3.pb4 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.newestCommentsPackage.newestComments.pb3.pb4, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.newestCommentsPackage.newestComments.pb3.pb4.displayName = 'proto.newestCommentsPackage.newestComments.pb3.pb4';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.newestCommentsPackage.newestComments.repeatedFields_ = [1,2,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.newestCommentsPackage.newestComments.prototype.toObject = function(opt_includeInstance) {
  return proto.newestCommentsPackage.newestComments.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.newestCommentsPackage.newestComments} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newestCommentsPackage.newestComments.toObject = function(includeInstance, msg) {
  var f, obj = {
    nestedmsg1List: jspb.Message.toObjectList(msg.getNestedmsg1List(),
    proto.newestCommentsPackage.newestComments.pb1.toObject, includeInstance),
    nestedmsg2List: jspb.Message.toObjectList(msg.getNestedmsg2List(),
    proto.newestCommentsPackage.newestComments.pb2.toObject, includeInstance),
    zeroint: jspb.Message.getFieldWithDefault(msg, 3, 0),
    nestedmsg3List: jspb.Message.toObjectList(msg.getNestedmsg3List(),
    proto.newestCommentsPackage.newestComments.pb3.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.newestCommentsPackage.newestComments}
 */
proto.newestCommentsPackage.newestComments.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.newestCommentsPackage.newestComments;
  return proto.newestCommentsPackage.newestComments.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.newestCommentsPackage.newestComments} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.newestCommentsPackage.newestComments}
 */
proto.newestCommentsPackage.newestComments.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.newestCommentsPackage.newestComments.pb1;
      reader.readMessage(value,proto.newestCommentsPackage.newestComments.pb1.deserializeBinaryFromReader);
      msg.addNestedmsg1(value);
      break;
    case 2:
      var value = new proto.newestCommentsPackage.newestComments.pb2;
      reader.readMessage(value,proto.newestCommentsPackage.newestComments.pb2.deserializeBinaryFromReader);
      msg.addNestedmsg2(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setZeroint(value);
      break;
    case 4:
      var value = new proto.newestCommentsPackage.newestComments.pb3;
      reader.readMessage(value,proto.newestCommentsPackage.newestComments.pb3.deserializeBinaryFromReader);
      msg.addNestedmsg3(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.newestCommentsPackage.newestComments.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.newestCommentsPackage.newestComments.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.newestCommentsPackage.newestComments} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newestCommentsPackage.newestComments.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNestedmsg1List();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.newestCommentsPackage.newestComments.pb1.serializeBinaryToWriter
    );
  }
  f = message.getNestedmsg2List();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.newestCommentsPackage.newestComments.pb2.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getNestedmsg3List();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.newestCommentsPackage.newestComments.pb3.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.newestCommentsPackage.newestComments.pb1.prototype.toObject = function(opt_includeInstance) {
  return proto.newestCommentsPackage.newestComments.pb1.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.newestCommentsPackage.newestComments.pb1} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newestCommentsPackage.newestComments.pb1.toObject = function(includeInstance, msg) {
  var f, obj = {
    constant1: jspb.Message.getFieldWithDefault(msg, 1, 0),
    constant2: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.newestCommentsPackage.newestComments.pb1}
 */
proto.newestCommentsPackage.newestComments.pb1.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.newestCommentsPackage.newestComments.pb1;
  return proto.newestCommentsPackage.newestComments.pb1.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.newestCommentsPackage.newestComments.pb1} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.newestCommentsPackage.newestComments.pb1}
 */
proto.newestCommentsPackage.newestComments.pb1.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setConstant1(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setConstant2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.newestCommentsPackage.newestComments.pb1.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.newestCommentsPackage.newestComments.pb1.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.newestCommentsPackage.newestComments.pb1} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newestCommentsPackage.newestComments.pb1.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConstant1();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getConstant2();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
};


/**
 * optional int64 constant1 = 1;
 * @return {number}
 */
proto.newestCommentsPackage.newestComments.pb1.prototype.getConstant1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.newestCommentsPackage.newestComments.pb1} returns this
 */
proto.newestCommentsPackage.newestComments.pb1.prototype.setConstant1 = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 constant2 = 2;
 * @return {number}
 */
proto.newestCommentsPackage.newestComments.pb1.prototype.getConstant2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.newestCommentsPackage.newestComments.pb1} returns this
 */
proto.newestCommentsPackage.newestComments.pb1.prototype.setConstant2 = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.newestCommentsPackage.newestComments.pb2.prototype.toObject = function(opt_includeInstance) {
  return proto.newestCommentsPackage.newestComments.pb2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.newestCommentsPackage.newestComments.pb2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newestCommentsPackage.newestComments.pb2.toObject = function(includeInstance, msg) {
  var f, obj = {
    constant1: jspb.Message.getFieldWithDefault(msg, 1, 0),
    constant2: jspb.Message.getFieldWithDefault(msg, 2, 0),
    constant3: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.newestCommentsPackage.newestComments.pb2}
 */
proto.newestCommentsPackage.newestComments.pb2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.newestCommentsPackage.newestComments.pb2;
  return proto.newestCommentsPackage.newestComments.pb2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.newestCommentsPackage.newestComments.pb2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.newestCommentsPackage.newestComments.pb2}
 */
proto.newestCommentsPackage.newestComments.pb2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setConstant1(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setConstant2(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setConstant3(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.newestCommentsPackage.newestComments.pb2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.newestCommentsPackage.newestComments.pb2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.newestCommentsPackage.newestComments.pb2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newestCommentsPackage.newestComments.pb2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConstant1();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getConstant2();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int64 constant1 = 1;
 * @return {number}
 */
proto.newestCommentsPackage.newestComments.pb2.prototype.getConstant1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.newestCommentsPackage.newestComments.pb2} returns this
 */
proto.newestCommentsPackage.newestComments.pb2.prototype.setConstant1 = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 constant2 = 2;
 * @return {number}
 */
proto.newestCommentsPackage.newestComments.pb2.prototype.getConstant2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.newestCommentsPackage.newestComments.pb2} returns this
 */
proto.newestCommentsPackage.newestComments.pb2.prototype.setConstant2 = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 constant3 = 3;
 * @return {number}
 */
proto.newestCommentsPackage.newestComments.pb2.prototype.getConstant3 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.newestCommentsPackage.newestComments.pb2} returns this
 */
proto.newestCommentsPackage.newestComments.pb2.prototype.setConstant3 = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.newestCommentsPackage.newestComments.pb2} returns this
 */
proto.newestCommentsPackage.newestComments.pb2.prototype.clearConstant3 = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.newestCommentsPackage.newestComments.pb2.prototype.hasConstant3 = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.newestCommentsPackage.newestComments.pb3.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.newestCommentsPackage.newestComments.pb3.prototype.toObject = function(opt_includeInstance) {
  return proto.newestCommentsPackage.newestComments.pb3.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.newestCommentsPackage.newestComments.pb3} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newestCommentsPackage.newestComments.pb3.toObject = function(includeInstance, msg) {
  var f, obj = {
    nestedmsg4List: jspb.Message.toObjectList(msg.getNestedmsg4List(),
    proto.newestCommentsPackage.newestComments.pb3.pb4.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.newestCommentsPackage.newestComments.pb3}
 */
proto.newestCommentsPackage.newestComments.pb3.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.newestCommentsPackage.newestComments.pb3;
  return proto.newestCommentsPackage.newestComments.pb3.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.newestCommentsPackage.newestComments.pb3} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.newestCommentsPackage.newestComments.pb3}
 */
proto.newestCommentsPackage.newestComments.pb3.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.newestCommentsPackage.newestComments.pb3.pb4;
      reader.readMessage(value,proto.newestCommentsPackage.newestComments.pb3.pb4.deserializeBinaryFromReader);
      msg.addNestedmsg4(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.newestCommentsPackage.newestComments.pb3.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.newestCommentsPackage.newestComments.pb3.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.newestCommentsPackage.newestComments.pb3} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newestCommentsPackage.newestComments.pb3.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNestedmsg4List();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.newestCommentsPackage.newestComments.pb3.pb4.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.newestCommentsPackage.newestComments.pb3.pb4.prototype.toObject = function(opt_includeInstance) {
  return proto.newestCommentsPackage.newestComments.pb3.pb4.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.newestCommentsPackage.newestComments.pb3.pb4} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newestCommentsPackage.newestComments.pb3.pb4.toObject = function(includeInstance, msg) {
  var f, obj = {
    before: jspb.Message.getFieldWithDefault(msg, 1, 0),
    othervar: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.newestCommentsPackage.newestComments.pb3.pb4}
 */
proto.newestCommentsPackage.newestComments.pb3.pb4.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.newestCommentsPackage.newestComments.pb3.pb4;
  return proto.newestCommentsPackage.newestComments.pb3.pb4.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.newestCommentsPackage.newestComments.pb3.pb4} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.newestCommentsPackage.newestComments.pb3.pb4}
 */
proto.newestCommentsPackage.newestComments.pb3.pb4.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBefore(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOthervar(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.newestCommentsPackage.newestComments.pb3.pb4.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.newestCommentsPackage.newestComments.pb3.pb4.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.newestCommentsPackage.newestComments.pb3.pb4} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newestCommentsPackage.newestComments.pb3.pb4.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBefore();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getOthervar();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 before = 1;
 * @return {number}
 */
proto.newestCommentsPackage.newestComments.pb3.pb4.prototype.getBefore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.newestCommentsPackage.newestComments.pb3.pb4} returns this
 */
proto.newestCommentsPackage.newestComments.pb3.pb4.prototype.setBefore = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 otherVar = 2;
 * @return {number}
 */
proto.newestCommentsPackage.newestComments.pb3.pb4.prototype.getOthervar = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.newestCommentsPackage.newestComments.pb3.pb4} returns this
 */
proto.newestCommentsPackage.newestComments.pb3.pb4.prototype.setOthervar = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated pb4 nestedmsg4 = 1;
 * @return {!Array<!proto.newestCommentsPackage.newestComments.pb3.pb4>}
 */
proto.newestCommentsPackage.newestComments.pb3.prototype.getNestedmsg4List = function() {
  return /** @type{!Array<!proto.newestCommentsPackage.newestComments.pb3.pb4>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.newestCommentsPackage.newestComments.pb3.pb4, 1));
};


/**
 * @param {!Array<!proto.newestCommentsPackage.newestComments.pb3.pb4>} value
 * @return {!proto.newestCommentsPackage.newestComments.pb3} returns this
*/
proto.newestCommentsPackage.newestComments.pb3.prototype.setNestedmsg4List = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.newestCommentsPackage.newestComments.pb3.pb4=} opt_value
 * @param {number=} opt_index
 * @return {!proto.newestCommentsPackage.newestComments.pb3.pb4}
 */
proto.newestCommentsPackage.newestComments.pb3.prototype.addNestedmsg4 = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.newestCommentsPackage.newestComments.pb3.pb4, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.newestCommentsPackage.newestComments.pb3} returns this
 */
proto.newestCommentsPackage.newestComments.pb3.prototype.clearNestedmsg4List = function() {
  return this.setNestedmsg4List([]);
};


/**
 * repeated pb1 nestedmsg1 = 1;
 * @return {!Array<!proto.newestCommentsPackage.newestComments.pb1>}
 */
proto.newestCommentsPackage.newestComments.prototype.getNestedmsg1List = function() {
  return /** @type{!Array<!proto.newestCommentsPackage.newestComments.pb1>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.newestCommentsPackage.newestComments.pb1, 1));
};


/**
 * @param {!Array<!proto.newestCommentsPackage.newestComments.pb1>} value
 * @return {!proto.newestCommentsPackage.newestComments} returns this
*/
proto.newestCommentsPackage.newestComments.prototype.setNestedmsg1List = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.newestCommentsPackage.newestComments.pb1=} opt_value
 * @param {number=} opt_index
 * @return {!proto.newestCommentsPackage.newestComments.pb1}
 */
proto.newestCommentsPackage.newestComments.prototype.addNestedmsg1 = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.newestCommentsPackage.newestComments.pb1, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.newestCommentsPackage.newestComments} returns this
 */
proto.newestCommentsPackage.newestComments.prototype.clearNestedmsg1List = function() {
  return this.setNestedmsg1List([]);
};


/**
 * repeated pb2 nestedmsg2 = 2;
 * @return {!Array<!proto.newestCommentsPackage.newestComments.pb2>}
 */
proto.newestCommentsPackage.newestComments.prototype.getNestedmsg2List = function() {
  return /** @type{!Array<!proto.newestCommentsPackage.newestComments.pb2>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.newestCommentsPackage.newestComments.pb2, 2));
};


/**
 * @param {!Array<!proto.newestCommentsPackage.newestComments.pb2>} value
 * @return {!proto.newestCommentsPackage.newestComments} returns this
*/
proto.newestCommentsPackage.newestComments.prototype.setNestedmsg2List = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.newestCommentsPackage.newestComments.pb2=} opt_value
 * @param {number=} opt_index
 * @return {!proto.newestCommentsPackage.newestComments.pb2}
 */
proto.newestCommentsPackage.newestComments.prototype.addNestedmsg2 = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.newestCommentsPackage.newestComments.pb2, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.newestCommentsPackage.newestComments} returns this
 */
proto.newestCommentsPackage.newestComments.prototype.clearNestedmsg2List = function() {
  return this.setNestedmsg2List([]);
};


/**
 * optional int64 zeroInt = 3;
 * @return {number}
 */
proto.newestCommentsPackage.newestComments.prototype.getZeroint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.newestCommentsPackage.newestComments} returns this
 */
proto.newestCommentsPackage.newestComments.prototype.setZeroint = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.newestCommentsPackage.newestComments} returns this
 */
proto.newestCommentsPackage.newestComments.prototype.clearZeroint = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.newestCommentsPackage.newestComments.prototype.hasZeroint = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated pb3 nestedmsg3 = 4;
 * @return {!Array<!proto.newestCommentsPackage.newestComments.pb3>}
 */
proto.newestCommentsPackage.newestComments.prototype.getNestedmsg3List = function() {
  return /** @type{!Array<!proto.newestCommentsPackage.newestComments.pb3>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.newestCommentsPackage.newestComments.pb3, 4));
};


/**
 * @param {!Array<!proto.newestCommentsPackage.newestComments.pb3>} value
 * @return {!proto.newestCommentsPackage.newestComments} returns this
*/
proto.newestCommentsPackage.newestComments.prototype.setNestedmsg3List = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.newestCommentsPackage.newestComments.pb3=} opt_value
 * @param {number=} opt_index
 * @return {!proto.newestCommentsPackage.newestComments.pb3}
 */
proto.newestCommentsPackage.newestComments.prototype.addNestedmsg3 = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.newestCommentsPackage.newestComments.pb3, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.newestCommentsPackage.newestComments} returns this
 */
proto.newestCommentsPackage.newestComments.prototype.clearNestedmsg3List = function() {
  return this.setNestedmsg3List([]);
};


goog.object.extend(exports, proto.newestCommentsPackage);
